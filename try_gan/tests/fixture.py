import numpy as np
import cv2
import os
from PIL import Image

from try_gan.image_files import bgr2rgb


class Fixture:
    @property
    def data_directory(self):
        base_path = os.path.abspath(os.path.dirname(__file__))
        return os.path.join(base_path, "test_data")

    @property
    def all_four(self):
        return os.path.join(self.data_directory, "all_four")

    @property
    def concatenated(self):
        return os.path.join(self.data_directory, "concatenated")

    def make_image(self):
        return np.array(
            [
                [
                    [255, 255, 255],
                    [255, 255, 255],
                    [217, 217, 217],
                    [9, 9, 9],
                    [68, 68, 68],
                    [180, 180, 180],
                    [255, 255, 255],
                    [253, 253, 253],
                ],
                [
                    [255, 255, 255],
                    [255, 255, 255],
                    [179, 179, 179],
                    [2, 2, 2],
                    [1, 1, 1],
                    [2, 2, 2],
                    [54, 54, 54],
                    [216, 216, 216],
                ],
                [
                    [255, 255, 255],
                    [255, 255, 255],
                    [252, 252, 252],
                    [54, 54, 54],
                    [2, 2, 2],
                    [0, 0, 0],
                    [4, 4, 4],
                    [0, 0, 0],
                ],
                [
                    [255, 255, 255],
                    [255, 255, 255],
                    [249, 249, 249],
                    [213, 213, 213],
                    [11, 11, 11],
                    [2, 2, 2],
                    [0, 0, 0],
                    [1, 1, 1],
                ],
                [
                    [255, 255, 255],
                    [255, 255, 255],
                    [255, 255, 255],
                    [255, 255, 255],
                    [146, 146, 146],
                    [5, 5, 5],
                    [2, 2, 2],
                    [2, 2, 2],
                ],
                [
                    [255, 255, 255],
                    [255, 255, 255],
                    [255, 255, 255],
                    [255, 255, 255],
                    [251, 251, 251],
                    [146, 146, 146],
                    [1, 1, 1],
                    [1, 1, 1],
                ],
                [
                    [255, 255, 255],
                    [255, 255, 255],
                    [255, 255, 255],
                    [255, 255, 255],
                    [255, 255, 255],
                    [255, 255, 255],
                    [145, 145, 145],
                    [1, 1, 1],
                ],
                [
                    [255, 255, 255],
                    [255, 255, 255],
                    [253, 253, 253],
                    [255, 255, 255],
                    [255, 255, 255],
                    [255, 255, 255],
                    [255, 255, 255],
                    [197, 197, 197],
                ],
            ],
            dtype=np.uint8,
        )

    def make_normalized_image(self):
        return np.array(
            [
                [
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [0.85098039, 0.85098039, 0.85098039],
                    [0.03529412, 0.03529412, 0.03529412],
                    [0.26666667, 0.26666667, 0.26666667],
                    [0.70588235, 0.70588235, 0.70588235],
                    [1.0, 1.0, 1.0],
                    [0.99215686, 0.99215686, 0.99215686],
                ],
                [
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [0.70196078, 0.70196078, 0.70196078],
                    [0.00784314, 0.00784314, 0.00784314],
                    [0.00392157, 0.00392157, 0.00392157],
                    [0.00784314, 0.00784314, 0.00784314],
                    [0.21176471, 0.21176471, 0.21176471],
                    [0.84705882, 0.84705882, 0.84705882],
                ],
                [
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [0.98823529, 0.98823529, 0.98823529],
                    [0.21176471, 0.21176471, 0.21176471],
                    [0.00784314, 0.00784314, 0.00784314],
                    [0.0, 0.0, 0.0],
                    [0.01568627, 0.01568627, 0.01568627],
                    [0.0, 0.0, 0.0],
                ],
                [
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [0.97647059, 0.97647059, 0.97647059],
                    [0.83529412, 0.83529412, 0.83529412],
                    [0.04313725, 0.04313725, 0.04313725],
                    [0.00784314, 0.00784314, 0.00784314],
                    [0.0, 0.0, 0.0],
                    [0.00392157, 0.00392157, 0.00392157],
                ],
                [
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [0.57254902, 0.57254902, 0.57254902],
                    [0.01960784, 0.01960784, 0.01960784],
                    [0.00784314, 0.00784314, 0.00784314],
                    [0.00784314, 0.00784314, 0.00784314],
                ],
                [
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [0.98431373, 0.98431373, 0.98431373],
                    [0.57254902, 0.57254902, 0.57254902],
                    [0.00392157, 0.00392157, 0.00392157],
                    [0.00392157, 0.00392157, 0.00392157],
                ],
                [
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [0.56862745, 0.56862745, 0.56862745],
                    [0.00392157, 0.00392157, 0.00392157],
                ],
                [
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [0.99215686, 0.99215686, 0.99215686],
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [1.0, 1.0, 1.0],
                    [0.77254902, 0.77254902, 0.77254902],
                ],
            ]
        )

    def make_digit(self, d, color, n=32):
        s = str(d)
        (w, h), baseline = cv2.getTextSize(s, cv2.FONT_HERSHEY_SIMPLEX, 1, 3)
        x = (w - baseline) // 2
        y = (n + h) // 2
        image = np.zeros([n, n, 3], dtype=np.uint8)
        image[:, :, :] = 255
        cv2.putText(image, s, (x, y), cv2.FONT_HERSHEY_SIMPLEX, 1, color, 3)
        return bgr2rgb(image)

    def make_test_digits(self):
        zero = self.make_digit(0, color=(0, 0, 0, 255))
        one = self.make_digit(1, color=(0, 209, 80, 255))
        two = self.make_digit(2, color=(209, 80, 0, 255))
        three = self.make_digit(3, color=(80, 0, 209, 255))
        return zero, one, two, three

    def load_from_all_four(self, filename):
        path = os.path.join(self.all_four, filename)
        return Image.open(path)
